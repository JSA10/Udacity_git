Bugs that don't crash your program can be a lot trickier than the ones that do.  When the function calculates an incorrect value, finding out where it  went wrong often involves splitting the function up into smaller pieces and  looking at what the values or variables are in each of these pieces.  One basic way to do this is to introduce print statements that help  put the variables where you can see them.  So here's a piece of code that removes the substring from a longer string.  For instance, if we call remove on audacity and a, we get udacity.  The way this works is it finds the location of the substring  in a longer string and the length of the substring.  And it uses those to extract the part of the longer string before and  after the location of the substring.  And it glues them together part_before and part_after and  it returns the result.  So this can remove a substring from the beginning or the end or  in the middle of a longer string, like so.  But sometimes it does pretty weird things,  like remove do from ding and get dining.  Is this function just doomed?  Try finding out where it's going wrong.  Looking at the values of some of these variables in the middle here might  be a good strategy.  Try adding some print statements to look at these variables and  see what you can find.  