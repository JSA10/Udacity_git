So, welcome to Unit 5.  The main topic for  this unit is trying to understand the cost of running programs.  So far we haven't really worried about this.  We've been very happy to write code.  If we get the correct result, that's a great thing.  But once we start making programs bigger,  worrying about programs that do more things, running on larger inputs,  we have to start thinking about the cost of running our programs.  This question of what it costs to evaluate an execution  is a very important problem in Computer Science and  sometimes it's one of the most fundamental problems.  Many people spend their whole careers working on this, and  it's a problem called Algorithm Analysis.  I haven't yet explained what an algorithm is, but  you've actually written many of them already.  So an algorithm is a procedure that always finishes.  A procedure is just a well-defined sequence of steps.  It has to be defined precisely enough that it could be executed mechanically.  So to be a procedure it has to be something that can be executed  without any thought.  And we're mostly interested in procedures that can be executed by  computers.  But the important part of what makes it a procedure is that the steps  are very precisely defined and don't require any thought to execute.  To be an algorithm it has to always finish, and  we've pointed out already that this is a very tough  problem to figure out whether a program will finish.  In general, it's not possible to answer that question, but for  many specific programs it is.  And in order for our program to be an algorithm, we have to know that it  always finishes and it always produces the correct result.  So once we have an algorithm, we know we have a well-defined sequence of steps,  so we can reason about what will happen on any input.  And we know that we will always finish and always produce the correct result.  So then we can think about what the cost is of executing that algorithm  on some input.  